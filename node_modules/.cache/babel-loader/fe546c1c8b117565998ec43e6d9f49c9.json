{"ast":null,"code":"import{setAppErrorAC,setAppStatusAC}from'../app/app-reducer';export var handleServerAppError=function handleServerAppError(data,dispatch){if(data.messages.length){dispatch(setAppErrorAC({error:data.messages[0]}));}else{dispatch(setAppErrorAC({error:'Some error occurred'}));}dispatch(setAppStatusAC({status:'failed'}));};export var handleServerNetworkError=function handleServerNetworkError(error,dispatch){dispatch(setAppErrorAC({error:error.message?error.message:'Some error occurred'}));dispatch(setAppStatusAC({status:'failed'}));};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/utils/error-utils.ts"],"names":["setAppErrorAC","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","error","status","handleServerNetworkError","message"],"mappings":"AAAA,OAAQA,aAAR,CAA8CC,cAA9C,KAA2F,oBAA3F,CAIA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAIC,IAAJ,CAA2BC,QAA3B,CAAkG,CAClI,GAAID,IAAI,CAACE,QAAL,CAAcC,MAAlB,CAA0B,CACtBF,QAAQ,CAACJ,aAAa,CAAC,CAACO,KAAK,CAAEJ,IAAI,CAACE,QAAL,CAAc,CAAd,CAAR,CAAD,CAAd,CAAR,CACH,CAFD,IAEO,CACHD,QAAQ,CAACJ,aAAa,CAAC,CAACO,KAAK,CAAE,qBAAR,CAAD,CAAd,CAAR,CACH,CACDH,QAAQ,CAACH,cAAc,CAAC,CAACO,MAAM,CAAE,QAAT,CAAD,CAAf,CAAR,CACH,CAPM,CASP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACF,KAAD,CAA6BH,QAA7B,CAAoG,CACxIA,QAAQ,CAACJ,aAAa,CAAC,CAACO,KAAK,CAAEA,KAAK,CAACG,OAAN,CAAgBH,KAAK,CAACG,OAAtB,CAAgC,qBAAxC,CAAD,CAAd,CAAR,CACAN,QAAQ,CAACH,cAAc,CAAC,CAACO,MAAM,CAAE,QAAT,CAAD,CAAf,CAAR,CACH,CAHM","sourcesContent":["import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}