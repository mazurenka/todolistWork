{"ast":null,"code":"import { setAppStatusAC } from '../../app/app-reducer';\nimport { authAPI } from \"../../api/todolists-api\";\nimport { handleServerAppError } from \"../../utils/error-utils\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoggedIn: false\n};\nconst slice = createSlice({\n  name: \"auth\",\n  initialState: initialState,\n  reducers: {\n    setIsLoggedInAC(state, action) {\n      state.isLoggedIn = action.payload.value;\n    }\n\n  }\n});\nexport const authReducer = slice.reducer;\nexport const {\n  setIsLoggedInAC\n} = slice.actions; // thunks\n\nexport const loginTC = data => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI.login(data).then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC({\n        value: true\n      }));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  }).catch(error => {\n    handleServerAppError(error, dispatch);\n  });\n};\nexport const logoutTC = () => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI.logout().then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC({\n        value: false\n      }));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  }).catch(error => {\n    handleServerAppError(error, dispatch);\n  });\n};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/Login/auth-reducer.ts"],"names":["setAppStatusAC","authAPI","handleServerAppError","createSlice","initialState","isLoggedIn","slice","name","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","loginTC","data","dispatch","login","then","res","resultCode","catch","error","logoutTC","logout"],"mappings":"AACA,SAAQA,cAAR,QAA6B,uBAA7B;AACA,SAAQC,OAAR,QAAuC,yBAAvC;AACA,SAAQC,oBAAR,QAAmC,yBAAnC;AACA,SAAQC,WAAR,QAAyC,kBAAzC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE;AADK,CAArB;AAIA,MAAMC,KAAK,GAAGH,WAAW,CAAC;AACtBI,EAAAA,IAAI,EAAE,MADgB;AAEtBH,EAAAA,YAAY,EAAEA,YAFQ;AAGtBI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAiD;AAC5DD,MAAAA,KAAK,CAACL,UAAN,GAAmBM,MAAM,CAACC,OAAP,CAAeC,KAAlC;AACH;;AAHK;AAHY,CAAD,CAAzB;AAUA,OAAO,MAAMC,WAAW,GAAGR,KAAK,CAACS,OAA1B;AACP,OAAO,MAAM;AAACN,EAAAA;AAAD,IAAoBH,KAAK,CAACU,OAAhC,C,CAEP;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAA4BC,QAAD,IAAwB;AACtEA,EAAAA,QAAQ,CAACnB,cAAc,CAAC,SAAD,CAAf,CAAR;AACAC,EAAAA,OAAO,CAACmB,KAAR,CAAcF,IAAd,EACKG,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACJ,IAAJ,CAASK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,CAACV,eAAe,CAAC;AAACI,QAAAA,KAAK,EAAE;AAAR,OAAD,CAAhB,CAAR;AACAM,MAAAA,QAAQ,CAACnB,cAAc,CAAC,WAAD,CAAf,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,oBAAoB,CAACoB,GAAG,CAACJ,IAAL,EAAWC,QAAX,CAApB;AACH;AACJ,GARL,EASKK,KATL,CASYC,KAAD,IAAW;AACdvB,IAAAA,oBAAoB,CAACuB,KAAD,EAAQN,QAAR,CAApB;AACH,GAXL;AAYH,CAdM;AAeP,OAAO,MAAMO,QAAQ,GAAG,MAAOP,QAAD,IAAwB;AAClDA,EAAAA,QAAQ,CAACnB,cAAc,CAAC,SAAD,CAAf,CAAR;AACAC,EAAAA,OAAO,CAAC0B,MAAR,GACKN,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACJ,IAAJ,CAASK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,CAACV,eAAe,CAAC;AAACI,QAAAA,KAAK,EAAE;AAAR,OAAD,CAAhB,CAAR;AACAM,MAAAA,QAAQ,CAACnB,cAAc,CAAC,WAAD,CAAf,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,oBAAoB,CAACoB,GAAG,CAACJ,IAAL,EAAWC,QAAX,CAApB;AACH;AACJ,GARL,EASKK,KATL,CASYC,KAAD,IAAW;AACdvB,IAAAA,oBAAoB,CAACuB,KAAD,EAAQN,QAAR,CAApB;AACH,GAXL;AAYH,CAdM","sourcesContent":["import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch)\r\n        })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}