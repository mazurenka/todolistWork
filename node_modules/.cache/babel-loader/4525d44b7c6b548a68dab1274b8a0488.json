{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useCallback}from'react';import{Checkbox,IconButton}from'@material-ui/core';import{EditableSpan}from'../../../../components/EditableSpan/EditableSpan';import{Delete}from'@material-ui/icons';import{TaskStatuses}from'../../../../api/todolists-api';export var Task=/*#__PURE__*/React.memo(function(props){var onClickHandler=useCallback(function(){return props.removeTask(props.task.id,props.todolistId);},[props.task.id,props.todolistId]);var onChangeHandler=useCallback(function(e){var newIsDoneValue=e.currentTarget.checked;props.changeTaskStatus(props.task.id,newIsDoneValue?TaskStatuses.Completed:TaskStatuses.New,props.todolistId);},[props.task.id,props.todolistId]);var onTitleChangeHandler=useCallback(function(newValue){props.changeTaskTitle(props.task.id,newValue,props.todolistId);},[props.task.id,props.todolistId]);return/*#__PURE__*/_jsxs(\"div\",{className:props.task.status===TaskStatuses.Completed?'is-done':'',children:[/*#__PURE__*/_jsx(Checkbox,{checked:props.task.status===TaskStatuses.Completed,color:\"primary\",onChange:onChangeHandler}),/*#__PURE__*/_jsx(EditableSpan,{value:props.task.title,onChange:onTitleChangeHandler}),/*#__PURE__*/_jsx(IconButton,{onClick:onClickHandler,children:/*#__PURE__*/_jsx(Delete,{})})]},props.task.id);});","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/TodolistsList/Todolist/Task/Task.tsx"],"names":["React","useCallback","Checkbox","IconButton","EditableSpan","Delete","TaskStatuses","Task","memo","props","onClickHandler","removeTask","task","id","todolistId","onChangeHandler","e","newIsDoneValue","currentTarget","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","status","title"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,EAA4BC,WAA5B,KAA8C,OAA9C,CACA,OAAQC,QAAR,CAAkBC,UAAlB,KAAmC,mBAAnC,CACA,OAAQC,YAAR,KAA2B,kDAA3B,CACA,OAAQC,MAAR,KAAqB,oBAArB,CACA,OAAQC,YAAR,KAAqC,+BAArC,CASA,MAAO,IAAMC,CAAAA,IAAI,cAAGP,KAAK,CAACQ,IAAN,CAAW,SAACC,KAAD,CAA0B,CACrD,GAAMC,CAAAA,cAAc,CAAGT,WAAW,CAAC,iBAAMQ,CAAAA,KAAK,CAACE,UAAN,CAAiBF,KAAK,CAACG,IAAN,CAAWC,EAA5B,CAAgCJ,KAAK,CAACK,UAAtC,CAAN,EAAD,CAA0D,CAACL,KAAK,CAACG,IAAN,CAAWC,EAAZ,CAAgBJ,KAAK,CAACK,UAAtB,CAA1D,CAAlC,CAEA,GAAMC,CAAAA,eAAe,CAAGd,WAAW,CAAC,SAACe,CAAD,CAAsC,CACtE,GAAIC,CAAAA,cAAc,CAAGD,CAAC,CAACE,aAAF,CAAgBC,OAArC,CACAV,KAAK,CAACW,gBAAN,CAAuBX,KAAK,CAACG,IAAN,CAAWC,EAAlC,CAAsCI,cAAc,CAAGX,YAAY,CAACe,SAAhB,CAA4Bf,YAAY,CAACgB,GAA7F,CAAkGb,KAAK,CAACK,UAAxG,EACH,CAHkC,CAGhC,CAACL,KAAK,CAACG,IAAN,CAAWC,EAAZ,CAAgBJ,KAAK,CAACK,UAAtB,CAHgC,CAAnC,CAKA,GAAMS,CAAAA,oBAAoB,CAAGtB,WAAW,CAAC,SAACuB,QAAD,CAAsB,CAC3Df,KAAK,CAACgB,eAAN,CAAsBhB,KAAK,CAACG,IAAN,CAAWC,EAAjC,CAAqCW,QAArC,CAA+Cf,KAAK,CAACK,UAArD,EACH,CAFuC,CAErC,CAACL,KAAK,CAACG,IAAN,CAAWC,EAAZ,CAAgBJ,KAAK,CAACK,UAAtB,CAFqC,CAAxC,CAIA,mBAAO,aAAyB,SAAS,CAAEL,KAAK,CAACG,IAAN,CAAWc,MAAX,GAAsBpB,YAAY,CAACe,SAAnC,CAA+C,SAA/C,CAA2D,EAA/F,wBACH,KAAC,QAAD,EACI,OAAO,CAAEZ,KAAK,CAACG,IAAN,CAAWc,MAAX,GAAsBpB,YAAY,CAACe,SADhD,CAEI,KAAK,CAAC,SAFV,CAGI,QAAQ,CAAEN,eAHd,EADG,cAOH,KAAC,YAAD,EAAc,KAAK,CAAEN,KAAK,CAACG,IAAN,CAAWe,KAAhC,CAAuC,QAAQ,CAAEJ,oBAAjD,EAPG,cAQH,KAAC,UAAD,EAAY,OAAO,CAAEb,cAArB,uBACI,KAAC,MAAD,IADJ,EARG,GAAUD,KAAK,CAACG,IAAN,CAAWC,EAArB,CAAP,CAYH,CAxBmB,CAAb","sourcesContent":["import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n"]},"metadata":{},"sourceType":"module"}