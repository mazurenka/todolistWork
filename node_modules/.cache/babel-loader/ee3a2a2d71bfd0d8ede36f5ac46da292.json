{"ast":null,"code":"import _toConsumableArray from\"D:/programming/ToDoListDimych/todolist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"D:/programming/ToDoListDimych/todolist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:/programming/ToDoListDimych/todolist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{addTodolistAC,removeTodolistAC,setTodolistsAC}from'./todolists-reducer';import{todolistsAPI}from'../../api/todolists-api';import{setAppStatusAC}from'../../app/app-reducer';import{handleServerAppError,handleServerNetworkError}from'../../utils/error-utils';var initialState={};export var tasksReducer=function tasksReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'REMOVE-TASK':return _objectSpread(_objectSpread({},state),{},_defineProperty({},action.todolistId,state[action.todolistId].filter(function(t){return t.id!=action.taskId;})));case\"ADD-TASK\":return _objectSpread(_objectSpread({},state),{},_defineProperty({},action.task.todoListId,[action.task].concat(_toConsumableArray(state[action.task.todoListId]))));case'UPDATE-TASK':return _objectSpread(_objectSpread({},state),{},_defineProperty({},action.todolistId,state[action.todolistId].map(function(t){return t.id===action.taskId?_objectSpread(_objectSpread({},t),action.model):t;})));case addTodolistAC.type:return _objectSpread(_objectSpread({},state),{},_defineProperty({},action.payload.todolist.id,[]));case removeTodolistAC.type:var copyState=_objectSpread({},state);delete copyState[action.payload.id];return copyState;case setTodolistsAC.type:{var _copyState=_objectSpread({},state);action.payload.todolists.forEach(function(tl){_copyState[tl.id]=[];});return _copyState;}case'SET-TASKS':return _objectSpread(_objectSpread({},state),{},_defineProperty({},action.todolistId,action.tasks));default:return state;}};// actions\nexport var removeTaskAC=function removeTaskAC(taskId,todolistId){return{type:'REMOVE-TASK',taskId:taskId,todolistId:todolistId};};export var addTaskAC=function addTaskAC(task){return{type:'ADD-TASK',task:task};};export var updateTaskAC=function updateTaskAC(taskId,model,todolistId){return{type:'UPDATE-TASK',model:model,todolistId:todolistId,taskId:taskId};};export var setTasksAC=function setTasksAC(tasks,todolistId){return{type:'SET-TASKS',tasks:tasks,todolistId:todolistId};};// thunks\nexport var fetchTasksTC=function fetchTasksTC(todolistId){return function(dispatch){dispatch(setAppStatusAC({status:'loading'}));todolistsAPI.getTasks(todolistId).then(function(res){var tasks=res.data.items;dispatch(setTasksAC(tasks,todolistId));dispatch(setAppStatusAC({status:'succeeded'}));});};};export var removeTaskTC=function removeTaskTC(taskId,todolistId){return function(dispatch){todolistsAPI.deleteTask(todolistId,taskId).then(function(res){var action=removeTaskAC(taskId,todolistId);dispatch(action);});};};export var addTaskTC=function addTaskTC(title,todolistId){return function(dispatch){dispatch(setAppStatusAC({status:'loading'}));todolistsAPI.createTask(todolistId,title).then(function(res){if(res.data.resultCode===0){var task=res.data.data.item;var action=addTaskAC(task);dispatch(action);dispatch(setAppStatusAC({status:'succeeded'}));}else{handleServerAppError(res.data,dispatch);}}).catch(function(error){handleServerNetworkError(error,dispatch);});};};export var updateTaskTC=function updateTaskTC(taskId,domainModel,todolistId){return function(dispatch,getState){var state=getState();var task=state.tasks[todolistId].find(function(t){return t.id===taskId;});if(!task){//throw new Error(\"task not found in the state\");\nconsole.warn('task not found in the state');return;}var apiModel=_objectSpread({deadline:task.deadline,description:task.description,priority:task.priority,startDate:task.startDate,title:task.title,status:task.status},domainModel);todolistsAPI.updateTask(todolistId,taskId,apiModel).then(function(res){if(res.data.resultCode===0){var action=updateTaskAC(taskId,domainModel,todolistId);dispatch(action);}else{handleServerAppError(res.data,dispatch);}}).catch(function(error){handleServerNetworkError(error,dispatch);});};};// types","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/TodolistsList/tasks-reducer.ts"],"names":["addTodolistAC","removeTodolistAC","setTodolistsAC","todolistsAPI","setAppStatusAC","handleServerAppError","handleServerNetworkError","initialState","tasksReducer","state","action","type","todolistId","filter","t","id","taskId","task","todoListId","map","model","payload","todolist","copyState","todolists","forEach","tl","tasks","removeTaskAC","addTaskAC","updateTaskAC","setTasksAC","fetchTasksTC","dispatch","status","getTasks","then","res","data","items","removeTaskTC","deleteTask","addTaskTC","title","createTask","resultCode","item","catch","error","updateTaskTC","domainModel","getState","find","console","warn","apiModel","deadline","description","priority","startDate","updateTask"],"mappings":"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","sourcesContent":["import {\r\n    addTodolistAC,\r\n    AddTodolistActionType,\r\n    removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: any): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case \"ADD-TASK\":\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case addTodolistAC.type:\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case removeTodolistAC.type:\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case setTodolistsAC.type: {\r\n            const copyState = {...state}\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n"]},"metadata":{},"sourceType":"module"}