{"ast":null,"code":"import { todolistsAPI } from '../../api/todolists-api';\nimport { setAppStatusAC } from '../../app/app-reducer';\nimport { handleServerNetworkError } from \"../../utils/error-utils\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst slice = createSlice({\n  name: \"todolists\",\n  initialState: initialState,\n  reducers: {\n    removeTodolistAC(state, action) {\n      const index = state.findIndex(tl => tl.id === action.payload.id);\n\n      if (index > -1) {\n        state.splice(index, 1);\n      }\n    },\n\n    addTodolistAC(state, action) {\n      state.unshift({ ...action.payload.todolist,\n        filter: 'all',\n        entityStatus: 'idle'\n      });\n    },\n\n    changeTodolistTitleAC(state, action) {\n      const index = state.findIndex(tl => tl.id === action.payload.id);\n      state[index].title = action.payload.title;\n    },\n\n    changeTodolistFilterAC(state, action) {\n      const index = state.findIndex(tl => tl.id === action.payload.id);\n      state[index].filter = action.payload.filter;\n    },\n\n    changeTodolistEntityStatusAC(state, action) {\n      const index = state.findIndex(tl => tl.id === action.payload.id);\n      state[index].entityStatus = action.payload.status;\n    },\n\n    setTodolistsAC(state, action) {\n      return action.payload.todolists.map(tl => ({ ...tl,\n        filter: 'all',\n        entityStatus: 'idle'\n      }));\n    }\n\n  }\n});\nexport const todolistsReducer = slice.reducer;\nexport const {\n  removeTodolistAC,\n  addTodolistAC,\n  changeTodolistTitleAC,\n  changeTodolistFilterAC,\n  changeTodolistEntityStatusAC,\n  setTodolistsAC\n} = slice.actions; // thunks\n\nexport const fetchTodolistsTC = () => {\n  return dispatch => {\n    dispatch(setAppStatusAC({\n      status: 'loading'\n    }));\n    todolistsAPI.getTodolists().then(res => {\n      dispatch(setTodolistsAC({\n        todolists: res.data\n      }));\n      dispatch(setAppStatusAC({\n        status: 'succeeded'\n      }));\n    }).catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n  };\n};\nexport const removeTodolistTC = todolistId => {\n  return dispatch => {\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\n    dispatch(setAppStatusAC({\n      status: 'loading'\n    })); //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n\n    dispatch(changeTodolistEntityStatusAC({\n      id: todolistId,\n      status: 'loading'\n    }));\n    todolistsAPI.deleteTodolist(todolistId).then(res => {\n      dispatch(removeTodolistAC({\n        id: todolistId\n      })); //скажем глобально приложению, что асинхронная операция завершена\n\n      dispatch(setAppStatusAC({\n        status: 'succeeded'\n      }));\n    });\n  };\n};\nexport const addTodolistTC = title => {\n  return dispatch => {\n    dispatch(setAppStatusAC({\n      status: 'loading'\n    }));\n    todolistsAPI.createTodolist(title).then(res => {\n      dispatch(addTodolistAC({\n        todolist: res.data.data.item\n      }));\n      dispatch(setAppStatusAC({\n        status: 'succeeded'\n      }));\n    });\n  };\n};\nexport const changeTodolistTitleTC = (id, title) => {\n  return dispatch => {\n    todolistsAPI.updateTodolist(id, title).then(res => {\n      dispatch(changeTodolistTitleAC({\n        id: id,\n        title\n      }));\n    });\n  };\n}; // types","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/TodolistsList/todolists-reducer.ts"],"names":["todolistsAPI","setAppStatusAC","handleServerNetworkError","createSlice","initialState","slice","name","reducers","removeTodolistAC","state","action","index","findIndex","tl","id","payload","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","title","changeTodolistFilterAC","changeTodolistEntityStatusAC","status","setTodolistsAC","todolists","map","todolistsReducer","reducer","actions","fetchTodolistsTC","dispatch","getTodolists","then","res","data","catch","error","removeTodolistTC","todolistId","deleteTodolist","addTodolistTC","createTodolist","item","changeTodolistTitleTC","updateTodolist"],"mappings":"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","sourcesContent":["import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\r\n"]},"metadata":{},"sourceType":"module"}