{"ast":null,"code":"import { v1 } from 'uuid';\nimport { setTodolistsAC } from './todolists-reducer';\nimport { TaskPriorities, TaskStatuses } from '../api/todolists-api';\nconst initialState = {\n  /*\"todolistId1\": [\r\n      { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n  ],\r\n  \"todolistId2\": [\r\n      { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n  ]*/\n};\nexport const tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      {\n        const stateCopy = { ...state\n        };\n        const tasks = stateCopy[action.todolistId];\n        const newTasks = tasks.filter(t => t.id !== action.taskId);\n        stateCopy[action.todolistId] = newTasks;\n        return stateCopy;\n      }\n\n    case 'ADD-TASK':\n      {\n        const stateCopy = { ...state\n        };\n        const newTask = {\n          id: v1(),\n          title: action.title,\n          status: TaskStatuses.New,\n          todoListId: action.todolistId,\n          description: '',\n          startDate: '',\n          deadline: '',\n          addedDate: '',\n          order: 0,\n          priority: TaskPriorities.Low\n        };\n        const tasks = stateCopy[action.todolistId];\n        const newTasks = [newTask, ...tasks];\n        stateCopy[action.todolistId] = newTasks;\n        return stateCopy;\n      }\n\n    case 'CHANGE-TASK-STATUS':\n      {\n        let todolistTasks = state[action.todolistId];\n        let newTasksArray = todolistTasks.map(t => t.id === action.taskId ? { ...t,\n          status: action.status\n        } : t);\n        state[action.todolistId] = newTasksArray;\n        return { ...state\n        };\n      }\n\n    case 'CHANGE-TASK-TITLE':\n      {\n        let todolistTasks = state[action.todolistId]; // найдём нужную таску:\n\n        let newTasksArray = todolistTasks.map(t => t.id === action.taskId ? { ...t,\n          title: action.title\n        } : t);\n        state[action.todolistId] = newTasksArray;\n        return { ...state\n        };\n      }\n\n    case 'ADD-TODOLIST':\n      {\n        return { ...state,\n          [action.todolistId]: []\n        };\n      }\n\n    case 'REMOVE-TODOLIST':\n      {\n        const copyState = { ...state\n        };\n        delete copyState[action.id];\n        return copyState;\n      }\n\n    case 'SET-TODOLISTS':\n      {\n        const copyState = { ...state\n        };\n        action.todolists.forEach(tl => {\n          copyState[tl.id] = [];\n        });\n        return copyState;\n      }\n\n    case \"SET-TASKS\":\n      {\n        const copyState = { ...state\n        };\n        copyState[action.todolistId] = action.tasks;\n        return copyState;\n      }\n\n    default:\n      return state;\n  }\n};\nexport const removeTaskAC = (taskId, todolistId) => {\n  return {\n    type: 'REMOVE-TASK',\n    taskId: taskId,\n    todolistId: todolistId\n  };\n};\nexport const addTaskAC = (title, todolistId) => {\n  return {\n    type: 'ADD-TASK',\n    title,\n    todolistId\n  };\n};\nexport const changeTaskStatusAC = (taskId, status, todolistId) => {\n  return {\n    type: 'CHANGE-TASK-STATUS',\n    status,\n    todolistId,\n    taskId\n  };\n};\nexport const changeTaskTitleAC = (taskId, title, todolistId) => {\n  return {\n    type: 'CHANGE-TASK-TITLE',\n    title,\n    todolistId,\n    taskId\n  };\n};\nexport const setTasksAC = (tasks, todolistId) => {\n  return {\n    type: \"SET-TASKS\",\n    tasks,\n    todolistId\n  };\n};\nexport const fetchTasksTC = () => {\n  return dispatch => {\n    task.getTodolists().then(res => {\n      dispatch(setTodolistsAC(res.data));\n    });\n  };\n};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/state/tasks-reducer.ts"],"names":["v1","setTodolistsAC","TaskPriorities","TaskStatuses","initialState","tasksReducer","state","action","type","stateCopy","tasks","todolistId","newTasks","filter","t","id","taskId","newTask","title","status","New","todoListId","description","startDate","deadline","addedDate","order","priority","Low","todolistTasks","newTasksArray","map","copyState","todolists","forEach","tl","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","setTasksAC","fetchTasksTC","dispatch","task","getTodolists","then","res","data"],"mappings":"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","sourcesContent":["import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type SetTasksActionType = {\r\n    type: \"SET-TASKS\"\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistId, description: '',\r\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state};\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const copyState = {...state};\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: \"SET-TASKS\", tasks, todolistId}\r\n}\r\n\r\nexport const fetchTasksTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        task.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}