{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\programming\\\\ToDoListDimych\\\\todolist\\\\src\\\\components\\\\ErrorSnackbar\\\\ErrorSnackbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setAppErrorAC } from '../../app/app-reducer';\n\nfunction Alert(props) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Alert;\nexport function ErrorSnackbar() {\n  _s();\n\n  //const [open, setOpen] = React.useState(true)\n  const error = useSelector(state => state.app.error);\n  const dispatch = useDispatch();\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    dispatch(setAppErrorAC({\n      error: null\n    }));\n  };\n\n  const isOpen = error !== null;\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    open: isOpen,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: handleClose,\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ErrorSnackbar, \"IFCBN2dY17DJ+bdSiLpe/gEmu4o=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c2 = ErrorSnackbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Alert\");\n$RefreshReg$(_c2, \"ErrorSnackbar\");","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/components/ErrorSnackbar/ErrorSnackbar.tsx"],"names":["React","Snackbar","MuiAlert","useDispatch","useSelector","setAppErrorAC","Alert","props","ErrorSnackbar","error","state","app","dispatch","handleClose","event","reason","isOpen"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAmC,wBAAnC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,SAAQC,aAAR,QAA4B,uBAA5B;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAkC;AAC9B,sBAAO,QAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,OAAO,EAAC,QAAhC;AAAA,OAA6CA;AAA7C;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;KAFQD,K;AAIT,OAAO,SAASE,aAAT,GAAyB;AAAA;;AAC5B;AACA,QAAMC,KAAK,GAAGL,WAAW,CAAkCM,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUF,KAArD,CAAzB;AACA,QAAMG,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,WAAW,GAAG,CAACC,KAAD,EAA+BC,MAA/B,KAAmD;AACnE,QAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB;AACH;;AACDH,IAAAA,QAAQ,CAACP,aAAa,CAAC;AAACI,MAAAA,KAAK,EAAE;AAAR,KAAD,CAAd,CAAR;AACH,GALD;;AAQA,QAAMO,MAAM,GAAGP,KAAK,KAAK,IAAzB;AAEA,sBACI,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEO,MAAhB;AAAwB,IAAA,gBAAgB,EAAE,IAA1C;AAAgD,IAAA,OAAO,EAAEH,WAAzD;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEA,WAAhB;AAA6B,MAAA,QAAQ,EAAC,OAAtC;AAAA,gBACKJ;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAtBeD,a;UAEEJ,W,EACGD,W;;;MAHLK,a","sourcesContent":["import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}