{"ast":null,"code":"import _objectSpread from\"D:/programming/ToDoListDimych/todolist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{todolistsAPI}from'../../api/todolists-api';import{setAppStatusAC}from'../../app/app-reducer';import{handleServerNetworkError}from\"../../utils/error-utils\";import{createSlice}from\"@reduxjs/toolkit\";var initialState=[];var slice=createSlice({name:\"todolists\",initialState:initialState,reducers:{removeTodolistAC:function removeTodolistAC(state,action){var index=state.findIndex(function(tl){return tl.id===action.payload.id;});if(index>-1){state.splice(index,1);}},addTodolistAC:function addTodolistAC(state,action){state.unshift(_objectSpread(_objectSpread({},action.payload.todolist),{},{filter:'all',entityStatus:'idle'}));},changeTodolistTitleAC:function changeTodolistTitleAC(state,action){var index=state.findIndex(function(tl){return tl.id===action.payload.id;});state[index].title=action.payload.title;},changeTodolistFilterAC:function changeTodolistFilterAC(state,action){var index=state.findIndex(function(tl){return tl.id===action.payload.id;});state[index].filter=action.payload.filter;},changeTodolistEntityStatusAC:function changeTodolistEntityStatusAC(state,action){var index=state.findIndex(function(tl){return tl.id===action.payload.id;});state[index].entityStatus=action.payload.status;},setTodolistsAC:function setTodolistsAC(state,action){return action.payload.todolists.map(function(tl){return _objectSpread(_objectSpread({},tl),{},{filter:'all',entityStatus:'idle'});});}}});export var todolistsReducer=slice.reducer;var _slice$actions=slice.actions,removeTodolistAC=_slice$actions.removeTodolistAC,addTodolistAC=_slice$actions.addTodolistAC,changeTodolistTitleAC=_slice$actions.changeTodolistTitleAC,changeTodolistFilterAC=_slice$actions.changeTodolistFilterAC,changeTodolistEntityStatusAC=_slice$actions.changeTodolistEntityStatusAC,setTodolistsAC=_slice$actions.setTodolistsAC;// thunks\nexport{removeTodolistAC,addTodolistAC,changeTodolistTitleAC,changeTodolistFilterAC,changeTodolistEntityStatusAC,setTodolistsAC};export var fetchTodolistsTC=function fetchTodolistsTC(){return function(dispatch){dispatch(setAppStatusAC({status:'loading'}));todolistsAPI.getTodolists().then(function(res){dispatch(setTodolistsAC({todolists:res.data}));dispatch(setAppStatusAC({status:'succeeded'}));}).catch(function(error){handleServerNetworkError(error,dispatch);});};};export var removeTodolistTC=function removeTodolistTC(todolistId){return function(dispatch){//изменим глобальный статус приложения, чтобы вверху полоса побежала\ndispatch(setAppStatusAC({status:'loading'}));//изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\ndispatch(changeTodolistEntityStatusAC({id:todolistId,status:'loading'}));todolistsAPI.deleteTodolist(todolistId).then(function(res){dispatch(removeTodolistAC({id:todolistId}));//скажем глобально приложению, что асинхронная операция завершена\ndispatch(setAppStatusAC({status:'succeeded'}));});};};export var addTodolistTC=function addTodolistTC(title){return function(dispatch){dispatch(setAppStatusAC({status:'loading'}));todolistsAPI.createTodolist(title).then(function(res){dispatch(addTodolistAC({todolist:res.data.data.item}));dispatch(setAppStatusAC({status:'succeeded'}));});};};export var changeTodolistTitleTC=function changeTodolistTitleTC(id,title){return function(dispatch){todolistsAPI.updateTodolist(id,title).then(function(res){dispatch(changeTodolistTitleAC({id:id,title:title}));});};};// types","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/TodolistsList/todolists-reducer.ts"],"names":["todolistsAPI","setAppStatusAC","handleServerNetworkError","createSlice","initialState","slice","name","reducers","removeTodolistAC","state","action","index","findIndex","tl","id","payload","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","title","changeTodolistFilterAC","changeTodolistEntityStatusAC","status","setTodolistsAC","todolists","map","todolistsReducer","reducer","actions","fetchTodolistsTC","dispatch","getTodolists","then","res","data","catch","error","removeTodolistTC","todolistId","deleteTodolist","addTodolistTC","createTodolist","item","changeTodolistTitleTC","updateTodolist"],"mappings":"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","sourcesContent":["import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\r\n"]},"metadata":{},"sourceType":"module"}