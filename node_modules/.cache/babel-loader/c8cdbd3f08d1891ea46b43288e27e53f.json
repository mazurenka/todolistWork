{"ast":null,"code":"import { todolistsAPI } from '../api/todolists-api';\nconst initialState = {\n  /*\"todolistId1\": [\r\n      { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n  ],\r\n  \"todolistId2\": [\r\n      { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n  ]*/\n};\nexport const tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      return { ...state,\n        [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)\n      };\n\n    case 'ADD-TASK':\n      return { ...state,\n        [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\n      };\n\n    case 'UPDATE-TASK':\n      {\n        let todolistTasks = state[action.todolistId];\n        let newTasksArray = todolistTasks.map(t => t.id === action.taskId ? { ...t,\n          ...action.model\n        } : t);\n        state[action.todolistId] = newTasksArray;\n        return { ...state\n        };\n      }\n\n    case 'ADD-TODOLIST':\n      {\n        return { ...state,\n          [action.todolist.id]: []\n        };\n      }\n\n    case 'REMOVE-TODOLIST':\n      {\n        const copyState = { ...state\n        };\n        delete copyState[action.id];\n        return copyState;\n      }\n\n    case 'SET-TODOLISTS':\n      {\n        const copyState = { ...state\n        };\n        action.todolists.forEach(tl => {\n          copyState[tl.id] = [];\n        });\n        return copyState;\n      }\n\n    case \"SET-TASKS\":\n      {\n        const copyState = { ...state\n        };\n        copyState[action.todolistId] = action.tasks;\n        return copyState;\n      }\n\n    default:\n      return state;\n  }\n}; // actions\n\nexport const removeTaskAC = (taskId, todolistId) => ({\n  type: 'REMOVE-TASK',\n  taskId: taskId,\n  todolistId: todolistId\n});\nexport const addTaskAC = task => ({\n  type: 'ADD-TASK',\n  task\n});\nexport const updateTaskAC = (taskId, model, todolistId) => ({\n  type: 'UPDATE-TASK',\n  model,\n  todolistId,\n  taskId\n});\nexport const setTasksAC = (tasks, todolistId) => ({\n  type: \"SET-TASKS\",\n  tasks,\n  todolistId\n}); // thunks\n\nexport const fetchTasksTC = todolistId => dispatch => {\n  todolistsAPI.getTasks(todolistId).then(res => {\n    dispatch(setTasksAC(res.data.items, todolistId));\n  });\n};\nexport const removeTaskTC = (taskId, todolistId) => dispatch => {\n  todolistsAPI.deleteTask(todolistId, taskId).then(res => {\n    const action = removeTaskAC(taskId, todolistId);\n    dispatch(action);\n  });\n};\nexport const addTaskTC = (title, todolistId) => disatch => {\n  todolistsAPI.createTask(todolistId, title).then(res => {\n    const task = res.data.data.item;\n    const action = addTaskAC(task);\n    disatch(action);\n  });\n};\nexport const updateTaskTC = (taskId, domainModel, todolistId) => (disatch, getState) => {\n  const state = getState();\n  const task = state.tasks[todolistId].find(t => t.id === taskId);\n\n  if (!task) {\n    console.warn(\"task not found in the state\");\n    return;\n  }\n\n  const apiModel = {\n    deadline: task.deadline,\n    description: task.description,\n    priority: task.priority,\n    startDate: task.startDate,\n    title: task.title,\n    status: task.status,\n    ...domainModel\n  };\n  todolistsAPI.updateTask(todolistId, taskId, apiModel).then(res => {\n    const action = updateTaskAC(taskId, domainModel, todolistId);\n    disatch(action);\n  });\n}; // types","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/state/tasks-reducer.ts"],"names":["todolistsAPI","initialState","tasksReducer","state","action","type","todolistId","filter","t","id","taskId","task","todoListId","todolistTasks","newTasksArray","map","model","todolist","copyState","todolists","forEach","tl","tasks","removeTaskAC","addTaskAC","updateTaskAC","setTasksAC","fetchTasksTC","dispatch","getTasks","then","res","data","items","removeTaskTC","deleteTask","addTaskTC","title","disatch","createTask","item","updateTaskTC","domainModel","getState","find","console","warn","apiModel","deadline","description","priority","startDate","status","updateTask"],"mappings":"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","sourcesContent":["import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {TasksStateType} from '../AppWithRedux';\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, ...action.model} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state};\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const copyState = {...state};\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: \"SET-TASKS\", tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId);\r\n            dispatch(action);\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (disatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC(task)\r\n            disatch(action)\r\n        })\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (disatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return;\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                disatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}