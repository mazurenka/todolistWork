{"ast":null,"code":"import { todolistsAPI } from '../api/todolists-api';\nconst initialState = {\n  /*\"todolistId1\": [\r\n      { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n  ],\r\n  \"todolistId2\": [\r\n      { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n      { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n          startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n  ]*/\n};\nexport const tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      {\n        const stateCopy = { ...state\n        };\n        const tasks = stateCopy[action.todolistId];\n        const newTasks = tasks.filter(t => t.id !== action.taskId);\n        stateCopy[action.todolistId] = newTasks;\n        return stateCopy;\n      }\n\n    case 'ADD-TASK':\n      {\n        const stateCopy = { ...state\n        };\n        const newTask = action.task;\n        const tasks = stateCopy[newTask.todoListId];\n        const newTasks = [newTask, ...tasks];\n        stateCopy[newTask.todoListId] = newTasks;\n        return stateCopy;\n      }\n\n    case 'CHANGE-TASK-STATUS':\n      {\n        let todolistTasks = state[action.todolistId];\n        let newTasksArray = todolistTasks.map(t => t.id === action.taskId ? { ...t,\n          status: action.status\n        } : t);\n        state[action.todolistId] = newTasksArray;\n        return { ...state\n        };\n      }\n\n    case 'CHANGE-TASK-TITLE':\n      {\n        let todolistTasks = state[action.todolistId]; // найдём нужную таску:\n\n        let newTasksArray = todolistTasks.map(t => t.id === action.taskId ? { ...t,\n          title: action.title\n        } : t);\n        state[action.todolistId] = newTasksArray;\n        return { ...state\n        };\n      }\n\n    case 'ADD-TODOLIST':\n      {\n        return { ...state,\n          [action.todolist.id]: []\n        };\n      }\n\n    case 'REMOVE-TODOLIST':\n      {\n        const copyState = { ...state\n        };\n        delete copyState[action.id];\n        return copyState;\n      }\n\n    case 'SET-TODOLISTS':\n      {\n        const copyState = { ...state\n        };\n        action.todolists.forEach(tl => {\n          copyState[tl.id] = [];\n        });\n        return copyState;\n      }\n\n    case \"SET-TASKS\":\n      {\n        const copyState = { ...state\n        };\n        copyState[action.todolistId] = action.tasks;\n        return copyState;\n      }\n\n    default:\n      return state;\n  }\n};\nexport const removeTaskAC = (taskId, todolistId) => {\n  return {\n    type: 'REMOVE-TASK',\n    taskId: taskId,\n    todolistId: todolistId\n  };\n};\nexport const addTaskAC = task => {\n  return {\n    type: 'ADD-TASK',\n    task\n  };\n};\nexport const changeTaskStatusAC = (taskId, status, todolistId) => {\n  return {\n    type: 'CHANGE-TASK-STATUS',\n    status,\n    todolistId,\n    taskId\n  };\n};\nexport const changeTaskTitleAC = (taskId, title, todolistId) => {\n  return {\n    type: 'CHANGE-TASK-TITLE',\n    title,\n    todolistId,\n    taskId\n  };\n};\nexport const setTasksAC = (tasks, todolistId) => {\n  return {\n    type: \"SET-TASKS\",\n    tasks,\n    todolistId\n  };\n};\nexport const fetchTasksTC = todolistId => {\n  return dispatch => {\n    todolistsAPI.getTasks(todolistId).then(res => {\n      dispatch(setTasksAC(res.data.items, todolistId));\n    });\n  };\n};\nexport const removeTaskTC = (taskId, todolistId) => {\n  return dispatch => {\n    todolistsAPI.deleteTask(todolistId, taskId).then(res => {\n      const action = removeTaskAC(taskId, todolistId);\n      dispatch(action);\n    });\n  };\n};\nexport const addTaskTC = (title, todolistId) => {\n  return disatch => {\n    todolistsAPI.createTask(todolistId, title).then(res => {\n      const task = res.data.data.item;\n      const action = addTaskAC(task);\n      disatch(action);\n    });\n  };\n};\nexport const changeTaskStatusTC = (taskId, status, todolistId) => {\n  return disatch => {\n    todolistsAPI.updateTask(todolistId, taskId).then(res => {\n      const task = res.data.data.item;\n      const action = addTaskAC(task);\n      disatch(action);\n    });\n  };\n};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/state/tasks-reducer.ts"],"names":["todolistsAPI","initialState","tasksReducer","state","action","type","stateCopy","tasks","todolistId","newTasks","filter","t","id","taskId","newTask","task","todoListId","todolistTasks","newTasksArray","map","status","title","todolist","copyState","todolists","forEach","tl","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","setTasksAC","fetchTasksTC","dispatch","getTasks","then","res","data","items","removeTaskTC","deleteTask","addTaskTC","disatch","createTask","item","changeTaskStatusTC","updateTask"],"mappings":"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","sourcesContent":["import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type SetTasksActionType = {\r\n    type: \"SET-TASKS\"\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n            const tasks = stateCopy[newTask.todoListId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[newTask.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state};\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const copyState = {...state};\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: \"SET-TASKS\", tasks, todolistId}\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                const action = removeTaskAC(taskId, todolistId);\r\n                dispatch(action);\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (disatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                disatch(action)\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (disatch: Dispatch) => {\r\n        \r\n        todolistsAPI.updateTask(todolistId, taskId, )\r\n            .then(res => {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                disatch(action)\r\n            })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}