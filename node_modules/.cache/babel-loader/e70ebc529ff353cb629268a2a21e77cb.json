{"ast":null,"code":"import { setAppStatusAC } from '../../app/app-reducer';\nimport { loginAPI } from \"../../api/todolists-api\";\nimport { handleServerAppError } from \"../../utils/error-utils\";\nconst initialState = {};\nexport const loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}; // actions\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\n//     ({type: 'REMOVE-TASK', taskId, todolistId} as const)\n// thunks\n\nexport const loginTC = data => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  loginAPI.login(data).then(res => {\n    if (res.data.resultCode === 0) {\n      alert('Yo');\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  }).catch(error => {\n    handleServerAppError(error, dispatch);\n  });\n}; // types","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/Login/login-reducer.ts"],"names":["setAppStatusAC","loginAPI","handleServerAppError","initialState","loginReducer","state","action","type","loginTC","data","dispatch","login","then","res","resultCode","alert","catch","error"],"mappings":"AACA,SAA+BA,cAA/B,QAA4E,uBAA5E;AAEA,SAAQC,QAAR,QAAwC,yBAAxC;AACA,SAAQC,oBAAR,QAAmC,yBAAnC;AAEA,MAAMC,YAA8B,GAAG,EAAvC;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAuB,GAAGF,YAA3B,EAAyCG,MAAzC,KAAmF;AAC3G,UAAQA,MAAM,CAACC,IAAf;AAEI;AACI,aAAOF,KAAP;AAHR;AAKH,CANM,C,CAQP;AACA;AACA;AAGA;;AACA,OAAO,MAAMG,OAAO,GAAIC,IAAD,IAA4BC,QAAD,IAA8D;AAC5GA,EAAAA,QAAQ,CAACV,cAAc,CAAC,SAAD,CAAf,CAAR;AACAC,EAAAA,QAAQ,CAACU,KAAT,CAAeF,IAAf,EACKG,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACJ,IAAJ,CAASK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BC,MAAAA,KAAK,CAAC,IAAD,CAAL;AACAL,MAAAA,QAAQ,CAACV,cAAc,CAAC,WAAD,CAAf,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,oBAAoB,CAACW,GAAG,CAACJ,IAAL,EAAWC,QAAX,CAApB;AACH;AACJ,GARL,EASKM,KATL,CASYC,KAAD,IAAW;AACdf,IAAAA,oBAAoB,CAACe,KAAD,EAAQP,QAAR,CAApB;AACH,GAXL;AAYH,CAdM,C,CAiBP","sourcesContent":["import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {TasksStateType} from \"../TodolistsList/tasks-reducer\";\r\nimport {loginAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\r\n//     ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    loginAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                alert('Yo')\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n\r\ntype ActionsType = any\r\n\r\ntype InitialStateType = {}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n"]},"metadata":{},"sourceType":"module"}