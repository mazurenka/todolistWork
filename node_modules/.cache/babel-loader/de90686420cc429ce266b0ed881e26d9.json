{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\programming\\\\ToDoListDimych\\\\todolist\\\\src\\\\features\\\\TodolistsList\\\\Todolist\\\\Todolist.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect } from 'react';\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\nimport { Button, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { Task } from './Task/Task';\nimport { TaskStatuses } from '../../../api/todolists-api';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasksTC } from '../tasks-reducer';\nexport const Todolist = /*#__PURE__*/React.memo(_c = _s(function ({\n  demo = false,\n  ...props\n}) {\n  _s();\n\n  console.log('Todolist called');\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const thunk = fetchTasksTC(props.id);\n    dispatch(thunk);\n  }, []);\n  const addTask = useCallback(title => {\n    props.addTask(title, props.id);\n  }, [props.addTask, props.id]);\n\n  const removeTodolist = () => {\n    props.removeTodolist(props.id);\n  };\n\n  const changeTodolistTitle = useCallback(title => {\n    props.changeTodolistTitle(props.id, title);\n  }, [props.id, props.changeTodolistTitle]);\n  const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter]);\n  const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter]);\n  const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter]);\n  let tasksForTodolist = props.tasks;\n\n  if (props.filter === 'active') {\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\n  }\n\n  if (props.filter === 'completed') {\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(EditableSpan, {\n        value: props.title,\n        onChange: changeTodolistTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: removeTodolist,\n        children: /*#__PURE__*/_jsxDEV(Delete, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AddItemForm, {\n      addItem: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tasksForTodolist.map(t => /*#__PURE__*/_jsxDEV(Task, {\n        task: t,\n        todolistId: props.id,\n        removeTask: props.removeTask,\n        changeTaskTitle: props.changeTaskTitle,\n        changeTaskStatus: props.changeTaskStatus\n      }, t.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 43\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: props.filter === 'all' ? 'outlined' : 'text',\n        onClick: onAllClickHandler,\n        color: 'default',\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: props.filter === 'active' ? 'outlined' : 'text',\n        onClick: onActiveClickHandler,\n        color: 'primary',\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: props.filter === 'completed' ? 'outlined' : 'text',\n        onClick: onCompletedClickHandler,\n        color: 'secondary',\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n}, \"kPXLwOPLIIjIrcPemBCsckTgeAg=\", false, function () {\n  return [useDispatch];\n}));\n_c2 = Todolist;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Todolist$React.memo\");\n$RefreshReg$(_c2, \"Todolist\");","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/features/TodolistsList/Todolist/Todolist.tsx"],"names":["React","useCallback","useEffect","AddItemForm","EditableSpan","Button","IconButton","Delete","Task","TaskStatuses","useDispatch","fetchTasksTC","Todolist","memo","demo","props","console","log","dispatch","thunk","id","addTask","title","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","status","New","Completed","map","removeTask","changeTaskTitle","changeTaskStatus","paddingTop"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}