{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\programming\\\\ToDoListDimych\\\\todolist\\\\src\\\\components\\\\ErrorSnackBar\\\\ErrorSnackBar.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setErrorAC } from \"../../app/app-reducer\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Alert;\nexport function ErrorSnackBar() {\n  _s();\n\n  //const [open, setOpen] = React.useState(true);\n  const error = useSelector(state => state.app.error);\n  const dispath = useDispatch();\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    dispath(setErrorAC(null));\n  };\n\n  const isOpen = error !== null;\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    spacing: 2,\n    sx: {\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: isOpen,\n      autoHideDuration: 6000,\n      onClose: handleClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleClose,\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ErrorSnackBar, \"d78BWeHdzsLZYBvrEiSnsq1Tszo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c3 = ErrorSnackBar;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"ErrorSnackBar\");","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/components/ErrorSnackBar/ErrorSnackBar.tsx"],"names":["React","Stack","Snackbar","MuiAlert","useDispatch","useSelector","setErrorAC","Alert","forwardRef","props","ref","ErrorSnackBar","error","state","app","dispath","handleClose","event","reason","isOpen","width"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAmC,qBAAnC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AAGA,MAAMC,KAAK,gBAAGP,KAAK,CAACQ,UAAN,MAA6C,SAASD,KAAT,CACvDE,KADuD,EAEvDC,GAFuD,EAGzD;AACE,sBAAO,QAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,GAAG,EAAEA,GAA7B;AAAkC,IAAA,OAAO,EAAC,QAA1C;AAAA,OAAuDD;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CALa,CAAd;MAAMF,K;AAON,OAAO,SAASI,aAAT,GAAyB;AAAA;;AAC5B;AACA,QAAMC,KAAK,GAAGP,WAAW,CAAkCQ,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUF,KAArD,CAAzB;AACA,QAAMG,OAAO,GAAGX,WAAW,EAA3B;;AAEA,QAAMY,WAAW,GAAG,CAACC,KAAD,EAAuCC,MAAvC,KAA2D;AAC3E,QAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB;AACH;;AACDH,IAAAA,OAAO,CAACT,UAAU,CAAC,IAAD,CAAX,CAAP;AACH,GALD;;AAOA,QAAMa,MAAM,GAAGP,KAAK,KAAK,IAAzB;AAEA,sBACI,QAAC,KAAD;AAAO,IAAA,OAAO,EAAE,CAAhB;AAAmB,IAAA,EAAE,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KAAvB;AAAA,2BACI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAED,MAAhB;AAAwB,MAAA,gBAAgB,EAAE,IAA1C;AAAgD,MAAA,OAAO,EAAEH,WAAzD;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,WAAhB;AAA6B,QAAA,QAAQ,EAAC,SAAtC;AAAgD,QAAA,EAAE,EAAE;AAACI,UAAAA,KAAK,EAAE;AAAR,SAApD;AAAA,kBACKR;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAxBeD,a;UAEEN,W,EACED,W;;;MAHJO,a","sourcesContent":["import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setErrorAC} from \"../../app/app-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    //const [open, setOpen] = React.useState(true);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispath = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispath(setErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n        </Stack>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}