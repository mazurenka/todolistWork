{"ast":null,"code":"import{tasksReducer}from'../features/TodolistsList/tasks-reducer';import{todolistsReducer}from'../features/TodolistsList/todolists-reducer';import{combineReducers}from'redux';import thunkMiddleware from'redux-thunk';import{appReducer}from'./app-reducer';import{authReducer}from\"../features/Login/auth-reducer\";import{configureStore}from\"@reduxjs/toolkit\";// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nvar rootReducer=combineReducers({tasks:tasksReducer,todolists:todolistsReducer,app:appReducer,auth:authReducer});// непосредственно создаём store\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nexport var store=configureStore({reducer:rootReducer,middleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware().prepend(thunkMiddleware);}});// определить автоматически тип всего объекта состояния\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store=store;","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/app/store.ts"],"names":["tasksReducer","todolistsReducer","combineReducers","thunkMiddleware","appReducer","authReducer","configureStore","rootReducer","tasks","todolists","app","auth","store","reducer","middleware","getDefaultMiddleware","prepend","window"],"mappings":"AAAA,OAAQA,YAAR,KAA2B,yCAA3B,CACA,OAAQC,gBAAR,KAA+B,6CAA/B,CACA,OAAyBC,eAAzB,KAA4D,OAA5D,CACA,MAAOC,CAAAA,eAAP,KAA4B,aAA5B,CACA,OAAQC,UAAR,KAAyB,eAAzB,CACA,OAAQC,WAAR,KAA0B,gCAA1B,CACA,OAAQC,cAAR,KAA6B,kBAA7B,CAEA;AACA;AACA,GAAMC,CAAAA,WAAW,CAAGL,eAAe,CAAC,CAChCM,KAAK,CAAER,YADyB,CAEhCS,SAAS,CAAER,gBAFqB,CAGhCS,GAAG,CAAEN,UAH2B,CAIhCO,IAAI,CAAEN,WAJ0B,CAAD,CAAnC,CAMA;AACA;AAEA,MAAO,IAAMO,CAAAA,KAAK,CAAGN,cAAc,CAAC,CAChCO,OAAO,CAAEN,WADuB,CAEhCO,UAAU,CAAE,oBAAAC,oBAAoB,QAAIA,CAAAA,oBAAoB,GAAGC,OAAvB,CAA+Bb,eAA/B,CAAJ,EAFA,CAAD,CAA5B,CAKP;AAGA;AACA;AACAc,MAAM,CAACL,KAAP,CAAeA,KAAf","sourcesContent":["import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n"]},"metadata":{},"sourceType":"module"}