{"ast":null,"code":"import { authAPI } from \"../api/todolists-api\";\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  status: 'idle',\n  error: null,\n  isInitialized: false\n};\nconst slice = createSlice({\n  name: \"app\",\n  initialState: initialState,\n  reducers: {\n    setAppStatusAC: (state, action) => {\n      state.status = action.payload.status;\n    },\n    setAppErrorAC: (state, action) => {\n      state.error = action.payload.error;\n    },\n    setAppInitializedAC: (state, action) => {\n      state.isInitialized = action.payload.isInitialized;\n    }\n  }\n});\nexport const appReducer = slice.reducer;\nexport const {\n  setAppErrorAC,\n  setAppStatusAC,\n  setAppInitializedAC\n} = slice.actions;\nexport const initializedAppTC = () => dispatch => {\n  authAPI.me().then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC({\n        value: true\n      }));\n    } else {}\n\n    dispatch(setAppInitializedAC({\n      isInitialized: true\n    }));\n  });\n};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/app/app-reducer.ts"],"names":["authAPI","setIsLoggedInAC","createSlice","initialState","status","error","isInitialized","slice","name","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","setAppInitializedAC","appReducer","reducer","actions","initializedAppTC","dispatch","me","then","res","data","resultCode","value"],"mappings":"AACA,SAAQA,OAAR,QAAsB,sBAAtB;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,WAAR,QAAyC,kBAAzC;AAEA,MAAMC,YAA8B,GAAG;AACnCC,EAAAA,MAAM,EAAE,MAD2B;AAEnCC,EAAAA,KAAK,EAAE,IAF4B;AAGnCC,EAAAA,aAAa,EAAE;AAHoB,CAAvC;AAMA,MAAMC,KAAK,GAAGL,WAAW,CAAC;AACtBM,EAAAA,IAAI,EAAE,KADgB;AAEtBL,EAAAA,YAAY,EAAEA,YAFQ;AAGtBM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAiE;AAC7ED,MAAAA,KAAK,CAACP,MAAN,GAAeQ,MAAM,CAACC,OAAP,CAAeT,MAA9B;AACH,KAHK;AAINU,IAAAA,aAAa,EAAE,CAACH,KAAD,EAAQC,MAAR,KAA4D;AACvED,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;AACH,KANK;AAONU,IAAAA,mBAAmB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA8D;AAC/ED,MAAAA,KAAK,CAACL,aAAN,GAAsBM,MAAM,CAACC,OAAP,CAAeP,aAArC;AACH;AATK;AAHY,CAAD,CAAzB;AAgBA,OAAO,MAAMU,UAAU,GAAGT,KAAK,CAACU,OAAzB;AAWP,OAAO,MAAM;AAACH,EAAAA,aAAD;AAAgBJ,EAAAA,cAAhB;AAAgCK,EAAAA;AAAhC,IAAuDR,KAAK,CAACW,OAAnE;AAEP,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAD,IAAwB;AAC1DpB,EAAAA,OAAO,CAACqB,EAAR,GAAaC,IAAb,CAAkBC,GAAG,IAAI;AACrB,QAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BL,MAAAA,QAAQ,CAACnB,eAAe,CAAC;AAACyB,QAAAA,KAAK,EAAE;AAAR,OAAD,CAAhB,CAAR;AACH,KAFD,MAEO,CAEN;;AACDN,IAAAA,QAAQ,CAACL,mBAAmB,CAAC;AAACT,MAAAA,aAAa,EAAE;AAAhB,KAAD,CAApB,CAAR;AACH,GAPD;AAQH,CATM","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n"]},"metadata":{},"sourceType":"module"}