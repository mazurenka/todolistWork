{"ast":null,"code":"import{authAPI}from\"../api/todolists-api\";import{setIsLoggedInAC}from\"../features/Login/auth-reducer\";import{createSlice}from\"@reduxjs/toolkit\";var initialState={status:'idle',error:null,isInitialized:false};var slice=createSlice({name:\"app\",initialState:initialState,reducers:{setAppStatusAC:function setAppStatusAC(state,action){state.status=action.payload.status;},setAppErrorAC:function setAppErrorAC(state,action){state.error=action.payload.error;},setAppInitializedAC:function setAppInitializedAC(state,action){state.isInitialized=action.payload.isInitialized;}}});export var appReducer=slice.reducer;var _slice$actions=slice.actions,setAppErrorAC=_slice$actions.setAppErrorAC,setAppStatusAC=_slice$actions.setAppStatusAC,setAppInitializedAC=_slice$actions.setAppInitializedAC;export{setAppErrorAC,setAppStatusAC,setAppInitializedAC};export var initializedAppTC=function initializedAppTC(){return function(dispatch){authAPI.me().then(function(res){if(res.data.resultCode===0){dispatch(setIsLoggedInAC({value:true}));}else{}dispatch(setAppInitializedAC({isInitialized:true}));});};};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/app/app-reducer.ts"],"names":["authAPI","setIsLoggedInAC","createSlice","initialState","status","error","isInitialized","slice","name","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","setAppInitializedAC","appReducer","reducer","actions","initializedAppTC","dispatch","me","then","res","data","resultCode","value"],"mappings":"AACA,OAAQA,OAAR,KAAsB,sBAAtB,CACA,OAAQC,eAAR,KAA8B,gCAA9B,CACA,OAAQC,WAAR,KAAyC,kBAAzC,CAEA,GAAMC,CAAAA,YAA8B,CAAG,CACnCC,MAAM,CAAE,MAD2B,CAEnCC,KAAK,CAAE,IAF4B,CAGnCC,aAAa,CAAE,KAHoB,CAAvC,CAMA,GAAMC,CAAAA,KAAK,CAAGL,WAAW,CAAC,CACtBM,IAAI,CAAE,KADgB,CAEtBL,YAAY,CAAEA,YAFQ,CAGtBM,QAAQ,CAAE,CACNC,cAAc,CAAE,wBAACC,KAAD,CAAQC,MAAR,CAAiE,CAC7ED,KAAK,CAACP,MAAN,CAAeQ,MAAM,CAACC,OAAP,CAAeT,MAA9B,CACH,CAHK,CAINU,aAAa,CAAE,uBAACH,KAAD,CAAQC,MAAR,CAA4D,CACvED,KAAK,CAACN,KAAN,CAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B,CACH,CANK,CAONU,mBAAmB,CAAE,6BAACJ,KAAD,CAAQC,MAAR,CAA8D,CAC/ED,KAAK,CAACL,aAAN,CAAsBM,MAAM,CAACC,OAAP,CAAeP,aAArC,CACH,CATK,CAHY,CAAD,CAAzB,CAgBA,MAAO,IAAMU,CAAAA,UAAU,CAAGT,KAAK,CAACU,OAAzB,C,mBAW6DV,KAAK,CAACW,O,CAA5DJ,a,gBAAAA,a,CAAeJ,c,gBAAAA,c,CAAgBK,mB,gBAAAA,mB,0DAE7C,MAAO,IAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SAAM,UAACC,QAAD,CAAwB,CAC1DpB,OAAO,CAACqB,EAAR,GAAaC,IAAb,CAAkB,SAAAC,GAAG,CAAI,CACrB,GAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,GAAwB,CAA5B,CAA+B,CAC3BL,QAAQ,CAACnB,eAAe,CAAC,CAACyB,KAAK,CAAE,IAAR,CAAD,CAAhB,CAAR,CACH,CAFD,IAEO,CAEN,CACDN,QAAQ,CAACL,mBAAmB,CAAC,CAACT,aAAa,CAAE,IAAhB,CAAD,CAApB,CAAR,CACH,CAPD,EAQH,CAT+B,EAAzB","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n"]},"metadata":{},"sourceType":"module"}