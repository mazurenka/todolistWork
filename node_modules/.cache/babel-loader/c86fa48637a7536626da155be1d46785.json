{"ast":null,"code":"import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\nimport { combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { appReducer } from './app-reducer';\nimport { authReducer } from \"../features/Login/auth-reducer\";\nimport { configureStore } from \"@reduxjs/toolkit\"; // объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer\n}); // непосредственно создаём store\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\n}); // определить автоматически тип всего объекта состояния\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/app/store.ts"],"names":["tasksReducer","todolistsReducer","combineReducers","thunkMiddleware","appReducer","authReducer","configureStore","rootReducer","tasks","todolists","app","auth","store","reducer","middleware","getDefaultMiddleware","prepend","window"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,yCAA3B;AACA,SAAQC,gBAAR,QAA+B,6CAA/B;AACA,SAAQC,eAAR,QAA8B,OAA9B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAAQC,UAAR,QAAyB,eAAzB;AACA,SAAQC,WAAR,QAA0B,gCAA1B;AACA,SAAQC,cAAR,QAA6B,kBAA7B,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGL,eAAe,CAAC;AAChCM,EAAAA,KAAK,EAAER,YADyB;AAEhCS,EAAAA,SAAS,EAAER,gBAFqB;AAGhCS,EAAAA,GAAG,EAAEN,UAH2B;AAIhCO,EAAAA,IAAI,EAAEN;AAJ0B,CAAD,CAAnC,C,CAMA;AACA;;AAEA,OAAO,MAAMO,KAAK,GAAGN,cAAc,CAAC;AAChCO,EAAAA,OAAO,EAAEN,WADuB;AAEhCO,EAAAA,UAAU,EAAEC,oBAAoB,IAAIA,oBAAoB,GAAGC,OAAvB,CAA+Bb,eAA/B;AAFJ,CAAD,CAA5B,C,CAKP;;AAGA;AACA;AACAc,MAAM,CAACL,KAAP,GAAeA,KAAf","sourcesContent":["import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n"]},"metadata":{},"sourceType":"module"}