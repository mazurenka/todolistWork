{"ast":null,"code":"import{setAppErrorAC,setAppStatusAC}from'../app/app-reducer';export var handleServerAppError=function handleServerAppError(data,dispatch){if(data.messages.length){dispatch(setAppErrorAC(data.messages[0]));}else{dispatch(setAppErrorAC('Some error occurred'));}dispatch(setAppStatusAC('failed'));};export var handleServerNetworkError=function handleServerNetworkError(error,dispatch){dispatch(setAppErrorAC(error.message?error.message:'Some error occurred'));dispatch(setAppStatusAC('failed'));};","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/utils/error-utils.ts"],"names":["setAppErrorAC","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","error","message"],"mappings":"AAAA,OAAQA,aAAR,CAA8CC,cAA9C,KAA2F,oBAA3F,CAIA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAIC,IAAJ,CAA2BC,QAA3B,CAAkG,CAClI,GAAID,IAAI,CAACE,QAAL,CAAcC,MAAlB,CAA0B,CACtBF,QAAQ,CAACJ,aAAa,CAACG,IAAI,CAACE,QAAL,CAAc,CAAd,CAAD,CAAd,CAAR,CACH,CAFD,IAEO,CACHD,QAAQ,CAACJ,aAAa,CAAC,qBAAD,CAAd,CAAR,CACH,CACDI,QAAQ,CAACH,cAAc,CAAC,QAAD,CAAf,CAAR,CACH,CAPM,CASP,MAAO,IAAMM,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,CAA6BJ,QAA7B,CAAoG,CACxIA,QAAQ,CAACJ,aAAa,CAACQ,KAAK,CAACC,OAAN,CAAgBD,KAAK,CAACC,OAAtB,CAAgC,qBAAjC,CAAd,CAAR,CACAL,QAAQ,CAACH,cAAc,CAAC,QAAD,CAAf,CAAR,CACH,CAHM","sourcesContent":["import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}