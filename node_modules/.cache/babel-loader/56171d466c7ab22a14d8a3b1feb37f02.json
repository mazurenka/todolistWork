{"ast":null,"code":"import axios from'axios';var instance=axios.create({baseURL:'https://social-network.samuraijs.com/api/1.1/',withCredentials:true,headers:{'API-KEY':'7e023e0b-7fe0-4dd0-a8f9-914f37858bac'}});// api\nexport var todolistsAPI={getTodolists:function getTodolists(){var promise=instance.get('todo-lists');return promise;},createTodolist:function createTodolist(title){var promise=instance.post('todo-lists',{title:title});return promise;},deleteTodolist:function deleteTodolist(id){var promise=instance.delete(\"todo-lists/\".concat(id));return promise;},updateTodolist:function updateTodolist(id,title){var promise=instance.put(\"todo-lists/\".concat(id),{title:title});return promise;},getTasks:function getTasks(todolistId){return instance.get(\"todo-lists/\".concat(todolistId,\"/tasks\"));},deleteTask:function deleteTask(todolistId,taskId){return instance.delete(\"todo-lists/\".concat(todolistId,\"/tasks/\").concat(taskId));},createTask:function createTask(todolistId,taskTitile){return instance.post(\"todo-lists/\".concat(todolistId,\"/tasks\"),{title:taskTitile});},updateTask:function updateTask(todolistId,taskId,model){return instance.put(\"todo-lists/\".concat(todolistId,\"/tasks/\").concat(taskId),model);}};export var authAPI={login:function login(data){var promise=instance.post('auth/login',data);return promise;},logout:function logout(){var promise=instance.delete('auth/login');return promise;},me:function me(){var promise=instance.get('auth/me');return promise;}};// types\nexport var TaskStatuses;(function(TaskStatuses){TaskStatuses[TaskStatuses[\"New\"]=0]=\"New\";TaskStatuses[TaskStatuses[\"InProgress\"]=1]=\"InProgress\";TaskStatuses[TaskStatuses[\"Completed\"]=2]=\"Completed\";TaskStatuses[TaskStatuses[\"Draft\"]=3]=\"Draft\";})(TaskStatuses||(TaskStatuses={}));export var TaskPriorities;(function(TaskPriorities){TaskPriorities[TaskPriorities[\"Low\"]=0]=\"Low\";TaskPriorities[TaskPriorities[\"Middle\"]=1]=\"Middle\";TaskPriorities[TaskPriorities[\"Hi\"]=2]=\"Hi\";TaskPriorities[TaskPriorities[\"Urgently\"]=3]=\"Urgently\";TaskPriorities[TaskPriorities[\"Later\"]=4]=\"Later\";})(TaskPriorities||(TaskPriorities={}));","map":{"version":3,"sources":["D:/programming/ToDoListDimych/todolist/src/api/todolists-api.ts"],"names":["axios","instance","create","baseURL","withCredentials","headers","todolistsAPI","getTodolists","promise","get","createTodolist","title","post","deleteTodolist","id","delete","updateTodolist","put","getTasks","todolistId","deleteTask","taskId","createTask","taskTitile","updateTask","model","authAPI","login","data","logout","me","TaskStatuses","TaskPriorities"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7e023e0b-7fe0-4dd0-a8f9-914f37858bac'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise = instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me');\r\n        return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}